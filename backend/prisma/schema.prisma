
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//   <--------------------------  SCHEMAS  -------------------------->

model User {
  id        Int           @id @default(autoincrement())
  phone     String        @unique
  name      String
  preference Preference?

  fromRequest Request[]   @relation("FromRequest")
  toRequest Request[]     @relation("ToRequest")

  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Request {
  id        Int           @id @default(autoincrement())
  status    Status

  fromUserId Int
  fromUser   User         @relation("FromRequest",fields: [fromUserId], references: [id])

  toUserId   Int
  toUser     User         @relation("ToRequest",  fields: [toUserId], references: [id])
}

model Otp {
  id        Int           @id @default(autoincrement())
  phone     String
  code      String
  expiredAt DateTime
  createdAt DateTime      @default(now())
  // 
  verified  Boolean       @default(false)
}

model Preference {
  id                   Int                @id @default(autoincrement())
  gender               Gender
  birthDate            String
  sexualOrientation    SexualOrientation 
  showSexualOrientation Boolean         
  interestedIn         InterestedIn     
  lookingFor           String       
  school               String?
  highestEducation     String
  work                 String            
  drink                Drink           
  smoke                String           
  workout              Workout         
  loveLanguage         String
  into                 String[]
  blocked_contacts     String[]
  imageurl             String[]           @default([""])

  userId               Int                @unique
  user                 User               @relation(fields: [userId], references: [id])
}

// birthDate have to be date will modify later
//   <--------------------------  ENUMS  -------------------------->

enum Gender {
  Male
  Female
  Other
}

enum SexualOrientation {
  Asexual
  Bisexual
  Gay
  Lesbian
  Pansexual
  Queer
  Straight
}

enum InterestedIn {
  Male
  Female
  Everyone
}


enum Drink {
  Never
  Occasionally
  Socially
  Regularly
}

enum Workout {
  Everyday
  Often
  Sometimes
  Never
}

// interested and rejected are first impression

enum Status {
  Matched
  NotMatched
  Rejected
  Interested
}
